
<html>
<head>

<title>sms</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>

<link href="css/font-awesome.css" rel="stylesheet">
<link href="css/bootstrap.css" rel="stylesheet">
<link href="css/style.css" rel="stylesheet">
</head>
<body>

<body style="overflow-y: scroll;">


<div class="navbar  navbar-inverse navbar-fixed-top" >
    <div >
         <div class="navbar-header">
         <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#menu">
         <span class="sr-only">Открыть</span>
         <span class="icon-bar"></span>
         <span class="icon-bar"></span>
         <span class="icon-bar"></span>
         </button>
        </div>

           <div class="collapse navbar-collapse " id="menu">

               <ul class="nav navbar-nav ">
                 <li><a href="javascript:click('call.xhtml')" ><i class="fa fa-pencil " aria-hidden="true"></i></a></li>
                 <li><a href="javascript:click('call.xhtml')" ><i class="fa fa-th " aria-hidden="true"></i></a></li>

                </ul>
                <ul class="nav navbar-nav navbar-right">
                <li><a href="javascript:click('sms.xhtml')" ><i class="fa fa-trash-o " aria-hidden="true"></i></a></li>
                </ul>
           </div>
    </div>
</div>




<table class="table" style="margin-top: 48px;">
<tr class="first"><th class="numb">#</th><th class="tel">Имя</th><th class="msg">Сообщение</th><th class="date">Дата</th><th class="time">Время</th><th></th></tr>


<bsh>

import org.json.*;
import android.net.Uri;
import android.provider.Contacts.People;
import android.provider.Contacts.Phones;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.*;
import java.text.SimpleDateFormat;
c = Calendar.getInstance();

d = new SimpleDateFormat("dd-MM-yyyy");
t = new SimpleDateFormat("HH:mm:ss");
date_now = d.format(c.getTime());
time_now = t.format(c.getTime());

arr = new ArrayList<Integer>();
sms = new JSONObject();
total = new JSONObject();

incoming=0;
outgoing=0;
draft = 0;
error = 0;
new_sms=0;

send = parameters.get("send");
text = parameters.get("date");

service = server.props.get("serviceContext");

SMS_CONTENT_URI = Uri.parse("content://sms");
cursor = service.getContentResolver().query(SMS_CONTENT_URI,
    new String[] { "_id", "thread_id", "address", "person", "date", "body", "status", "type", "read"}, null, null, "date DESC");

numberold=0;
smsCount = 0;

if (cursor != null) {
    try {
        smsCount = cursor.getCount();
		colour = "#eaeaea";
		//print(text);
        if (cursor.moveToFirst()) {
            do {
				colour = colour.equals("#eaeaea") ? "white" : "#eaeaea";
				position = cursor.getPosition();

                messageId = cursor.getLong(0);
                threadId = cursor.getLong(1);
				address= cursor.getString(2);
				contactId = cursor.getInt(3);
                timestamp = cursor.getLong(4);
                body = cursor.getString(5);
                status = cursor.getInt(6);
				type =  cursor.getInt(7);
				read = cursor.getInt(8);

				date = d.format(timestamp);
				time = t.format(timestamp);

			  // поиск контакта
                if(address != null) {
                    name = null;
					phones = service.getContentResolver().query(android.provider.ContactsContract.CommonDataKinds.Phone.CONTENT_URI, new String[] { android.provider.ContactsContract.CommonDataKinds.Phone.RAW_CONTACT_ID }, android.provider.ContactsContract.CommonDataKinds.Phone.NUMBER + "=?", new String[] { address }, null);
                    if(phones.moveToFirst()) {
                        contactId = phones.getInt(0);
                    }
                    phones.close();
                    contact = service.getContentResolver().query(
                        android.provider.ContactsContract.Data.CONTENT_URI, new String[] {android.provider.ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME }, android.provider.ContactsContract.Data.RAW_CONTACT_ID + "=? AND " + android.provider.ContactsContract.CommonDataKinds.StructuredName.MIMETYPE + "=?", new String[] { "" + contactId, android.provider.ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE }, null);
                    if(contact.moveToFirst()) {
                        name = contact.getString(0);
                    }
                    contact.close();
				}else{
					name = null;
				}

					if (name == null) {
						name = "null";
					}

					switch(type) {
						case 1:
						type = "incoming";
						incoming = incoming + 1;
						break;
						case 2:
						type = "outgoing";
						outgoing = outgoing + 1;
						break;
						case 3:
						type = "draft";
						draft = draft + 1;
						break;
						case 5:
						type = "error";
						error = error + 1;
						break;
						default:
                        type = "undefined";
                        break;
					}

					if(read==0){
						new_sms=new_sms+1;
						}

					sms.put("Id", messageId);
					sms.put("threadId", threadId);
					sms.put("number", address);
					sms.put("timestamp", timestamp);
					sms.put("date", date);
					sms.put("time", time);
					sms.put("body", body);
					//sms.put("count", count);
					sms.put("read", read);
					sms.put("type", type);
					sms.put("name", name);




					if(send!=null){
						switch(send) {
							case "now":
								if(date_now.equals(date)){
									arr.add(sms);
									print(send);
								}
							break;
							case "all":
							if(text!=null){
								if(text.equals(date)){
									arr.add(sms);
							}
							}else{
								arr.add(sms);
							}
							break;
							case "incoming":
							if(type=="incoming"){
								if(text!=null){
									if(text.equals(date)){
										arr.add(sms);
									}
								}else{
									arr.add(sms);
								}
							}
							break;
							case "outgoing":
							if(type=="outgoing"){
								if(text!=null){
									if(text.equals(date)){
										arr.add(sms);
									}
								}else{
									arr.add(sms);
								}
							}
							break;
						}
						//print(date_now.equals(date));

					}else{

						callImage = "";
						callTypeLabel = "";
						switch(type) {
							case "incoming":
							callImage = "<i class='fa fa-arrow-down' aria-hidden='true'></i>";
							break;
							case "outgoing":
							callImage = "<i class='fa fa-arrow-up' aria-hidden='true'></i>";
							break;
							case "draft":
							callImage = "<i class='fa fa-pencil' aria-hidden='true'></i>";
							break;
							case "error":
							callImage = "<i class='fa fa-ban text-danger' aria-hidden='true'></i>";
							break;

						}

						if(read==0){
								read = "<i class='fa fa-spin fa-envelope' aria-hidden='true'></i>";
							}else{
								read = "";
							}

						if(!name.equals("null")) {
							//phoneLink = "<a href='app/dial.xhtml?number=" + URLEncoder.encode(callNumber) + "' class='link'>" + (callName != "null" ? callName : callNumber)  + "</a>";
							phoneLink = name;
						}else {
							phoneLink = address;
							}
							print("<tr><td class='numb'>"+ ++position+"&nbsp;" + callImage + "</td><td class='tel' >"+phoneLink+"</td><td class='msg'>"+body+"</td><td >"+date+"</td><td>"+time+"</td><td>" + read + "</td></tr>");
					}

			//print("проверка");

				sms = "";
				sms = new JSONObject();












            } while(cursor.moveToNext());
        }
    }
    finally {
        cursor.close();
    }
}


total.put("all", smsCount);
total.put("draft", draft);
total.put("outgoing", outgoing);
total.put("incoming", incoming);
total.put("new_sms", new_sms);
total.put("error", error);


if(send!=null){

if(send.equals("info")){
sand_date=total;
}else{
sand_date=arr;
}

request.sendResponse(sand_date.toString().getBytes(), "text/plain; charset=UTF-8");
request.out.flush();
request.out.close();

}else{
	print("</table>");
}


</bsh>
</body>
</html>
